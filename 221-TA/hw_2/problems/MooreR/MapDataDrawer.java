/**
 * CSCI 221, HW 2 (McCauley)
 * Base code provided by instructor and updated by:
 * 
 * <Riley Moore>
 */

import java.util.*;
import java.io.*;
import java.awt.*;

public class MapDataDrawer
{
  // store map data in grid array
  private int[][] grid; 
  
  // Read 2D array into grid. Data in file "filename", grid is rows x cols
   public MapDataDrawer(String filename, int rows, int cols) throws Exception{
      // initialize grid 
      grid = new int[rows][cols];
      //read the data from the file into the grid
      Scanner S = new Scanner(new File(filename));    
      
       for(int row=0; row < grid.length; row++){
          for(int col=0; col<grid[0].length; col++){
             grid[row][col] = S.nextInt(); 
          }
       }
      
  }

  
  /**
   * @return the min value in the entire grid
   */
  public int findMin(){
      int minVal = grid[0][0];
      for(int i = 0; i<grid.length; i++){
          for(int j = 0; j<grid[i].length; j++){
              if(grid[i][j] < minVal){
                  minVal = grid[i][j];
                }
            }
        }
      return minVal;  
  }
  
  /**
   * @return the max value in the entire grid
   */
  public int findMax(){
      int MAX_VALUE = grid[0][0];
      for(int i = 0; i<grid.length; i++){
          for(int j = 0; j<grid[0].length; j++){
              if(grid[i][j] > MAX_VALUE){
                  MAX_VALUE = grid[i][j];
                }
            }
        }
      return MAX_VALUE; 
  }

  
  /**
   * @param col the column of the grid to check
   * @return the index of the row with the lowest value in the given col for the grid
   */
  public  int indexOfMinRow(int col){
      int lowestVal = grid[0][col];
      int rowIndex = 0;
      for(int i = 1; i<grid.length; i++){
          if(grid[i][col] < lowestVal){
              lowestVal = grid[i][col];
              rowIndex = i;
            }
        }
        
      return rowIndex;  
  }
  
  
  /**
   * DON'T CHANGE THIS CODE
   * Draws the grid using the given Graphics object. 
   * Colors should be grayscale values 0-255, scaled based on min/max values in grid
   * 
   * ALERT:Until your findMin and findMax methods work, your output will
   * be a completely black graph.
   */
  public void drawMap(Graphics g){
      
    int minVal = findMin();
    int maxVal = findMax();
    double range = maxVal - minVal;
    
    for(int row=0; row < grid.length; row++){
      for(int col=0; col<grid[0].length; col++){
         int val = (int)(((grid[row][col]-minVal)/range) * 255);
         //g.setColor(new Color(val,255-val,255-val));
         g.setColor(new Color(val,val,val));
         g.fillRect(col,row,1,1);
        }
    }      
  }
  

   /**
   * Find a path from West-to-East starting at given row.
   * Choose a foward step out of 3 possible forward locations, using greedy method described in assignment.
   * @return the total change in elevation traveled from West-to-East
   */
  public int drawLowestElevPath(Graphics g, int row){
    int currY = row; // row in grid of step one
    int elivChange = 0;
    int nextColumn = 0;
    int goUp = -1;
    int goDown = -1;
    int differenceInCols = 0;
    
    int maxVal = findMax();
    int nextUp = maxVal + 1;
    int nextDown = maxVal +1;
    // draw initial step - column 0, current row (sent in as parameter)
    for(int i = 0; i < grid[0].length-1; ++i){    
        g.fillRect(0,row,1,1);
        nextColumn = grid[row][i+1];
        if(currY != 0){
            goUp = grid[currY-1][i+1];
        }
        if(currY != (grid.length -1)){
            goDown = grid[currY+1][i+1];
        }
            
        // Code to compute next step
        
        differenceInCols = Math.abs(grid[currY][i+1] - grid[currY][i]);
        if(goUp > -1){
            nextUp = Math.abs(grid[currY][i] - goUp);
        }
        if(nextDown > -1){
            nextDown = Math.abs(grid[currY][i] - goDown);
        }
        if(differenceInCols > nextUp && nextUp > nextDown){
            differenceInCols = nextDown;
            currY = currY+1;
        }
        else{
            differenceInCols = nextUp;
            currY = currY - 1;
        }
    
        if(differenceInCols > nextDown){
            differenceInCols = nextDown;
            currY = currY + 1;
        }
        else{
            differenceInCols = differenceInCols;
        }
        elivChange = elivChange + differenceInCols;   
        // draw next step where x is currently column and currY is row in grid
        int x = 0; // the value of x will be generated by a loop that goes through the
        // columns, but for now, need something to put in "paint" statement
        g.fillRect(x,currY,1,1);
    }
     return elivChange; // computed change in elevation
    
  }
  
  /**
   * @return the index of the starting row for the lowest-elevation-change path in the entire grid.
   */
  public int indexOfLowestElevPath(Graphics g){
      int leastElev = drawLowestElevPath(g,0);
      int indexOfLowest = 0;
      int changeElev =0;
      for(int i = 1; i<grid.length; i++){
          changeElev = drawLowestElevPath(g, i);
          if(changeElev < leastElev){
              leastElev = changeElev;
              indexOfLowest = i;
  }
  
  
}
return indexOfLowest; // row of path with lowest elevation
}
}