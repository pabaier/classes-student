/**
 * CSCI 221, HW 2 (McCauley)
 * Base code provided by instructor and updated by:
 * 
 * <Your name goes here>
 */

import java.util.*;
import java.io.*;
import java.awt.*;

public class MapDataDrawer
{
  // store map data in grid array
  private int[][] grid; 
  
  // Read 2D array into grid. Data in file "filename", grid is rows x cols
   public MapDataDrawer(String filename, int rows, int cols) throws Exception{
      // initialize grid 
      grid = new int[rows][cols];
      //read the data from the file into the grid
      Scanner S = new Scanner(new File(filename));    
      
       for(int row=0; row < grid.length; row++){
          for(int col=0; col<grid[0].length; col++){
             grid[row][col] = S.nextInt(); 
          }
       }
      S.close();
  }

  
  /**
   * @return the min value in the entire grid
   */
  public int findMin(){
	 int min = grid[0][0];
	 for(int i = 0; i < grid.length; i++){
		 for(int j = 0; j < grid[0].length; j++){
			 if(grid[i][j] < min){
				 min = grid[i][j];
			 }
		 }
	 }
      return min;  
  }
  
  /**
   * @return the max value in the entire grid
   */
  public int findMax(){
	  int max = grid[0][0];
	  for(int i = 0; i < grid.length; i++){
		  for(int j = 0; j < grid[0].length; j++){
			  if(grid[i][j] > max){
				  max = grid[i][j];
			  }
		  }
	  }
      return max; 
  }
  
  /**
   * @param col the column of the grid to check
   * @return the index of the row with the lowest value in the given col for the grid
   */
  public  int indexOfMinRow(int col){
	  int mini = grid[0][col];
	  int mRow = 0;
	  for(int i = 0; i < grid.length; i++){
		  if(grid[i][col] < mini){
			  mini = grid[i][col];
			  mRow = i;
		  }
	  }
      
      return mRow;  
  }
  
  
  /**
   * DON'T CHANGE THIS CODE
   * Draws the grid using the given Graphics object. 
   * Colors should be grayscale values 0-255, scaled based on min/max values in grid
   * 
   * ALERT:Until your findMin and findMax methods work, your output will
   * be a completely black graph.
   */
  public void drawMap(Graphics g){
      
    int minVal = findMin();
    int maxVal = findMax();
    double range = maxVal - minVal;
    
    for(int row=0; row < grid.length; row++){
      for(int col=0; col<grid[0].length; col++){
         int val = (int)(((grid[row][col]-minVal)/range) * 255);
         //g.setColor(new Color(val,255-val,255-val));
         g.setColor(new Color(val,val,val));
         g.fillRect(col,row,1,1);
        }
    }      
  }
  

   /**
   * Find a path from West-to-East starting at given row.
   * Choose a foward step out of 3 possible forward locations, using greedy method described in assignment.
   * @return the total change in elevation traveled from West-to-East
   */
  public int drawLowestElevPath(Graphics g, int row){
    int currY = row; // row in grid of step one
    // draw initial step - column 0, current row (sent in as parameter)
    g.fillRect(0,row,1,1);
    
    // Code to compute next step
    int totalChange = 0;
    int max = findMax();
    
    for(int i = 0 ; i < grid[0].length; i++){
    	int moveF = grid[row][i +1];
    	int moveUp = -1;
    	int moveDown = -1;
    	
    	if(row != 0){
    		moveUp = grid[row - 1][i +1];
    	}
    	
    	else if( row != grid.length -1){
    		moveDown = grid[row + 1][i + 1];
    	}
    	
    	int currentDiff = Math.abs(grid[row][i] - moveF);
    	int upDiff = max + 1;
    	int downDiff = max + 1;
    	if(moveUp > -1){
    		  upDiff = Math.abs(grid[row][i] - moveUp);
		  }
		if (moveDown > -1){
			downDiff = Math.abs(grid[row][i] - moveDown);
		  }
		
		int least = currentDiff;
		if (currentDiff > upDiff)
		  {
			  if (currentDiff > downDiff)
			  {
				  least = downDiff;
				  row++;
			  }
			  else
			  {
				  least = upDiff;
				  row--;
			  }
		  }
		  else
		  {
			  if (currentDiff > downDiff)
			  {
				  least = downDiff;
				  row++;
			  }
			  else
			  {
				  least = currentDiff;
			  }
		  }
		  
		  totalChange += least;
		  
    }
    
    // draw next step where x is currently column and currY is row in grid
    int x = 0; // the value of x will be generated by a loop that goes through the
    // columns, but for now, need something to put in "paint" statement
    g.fillRect(x,currY,1,1);
    
    return totalChange; // computed change in elevation
  }
  
  /**
   * @return the index of the starting row for the lowest-elevation-change path in the entire grid.
   */
  public int indexOfLowestElevPath(Graphics g){
     
      return 0; // row of path with lowest elevation
  
  }
  
  
}