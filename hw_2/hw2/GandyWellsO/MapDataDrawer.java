/**
 * CSCI 221, HW 2 (McCauley)
 * Base code provided by instructor and updated by:
 * 
 * Orianna Gandy-Wells
 */

import java.util.*;
import java.io.*;
import java.awt.*;

public class MapDataDrawer
{
  // store map data in grid array
  private int[][] grid; 
  
  // Read 2D array into grid. Data in file "filename", grid is rows x cols
   public MapDataDrawer(String filename, int rows, int cols) throws Exception{
      // initialize grid 
      grid = new int[rows][cols];
      //read the data from the file into the grid
      Scanner S = new Scanner(new File(filename));    
      
       for(int row=0; row < grid.length; row++){
          for(int col=0; col<grid[0].length; col++){
             grid[row][col] = S.nextInt(); 
          }
       }
      
  }

  
  /**
   * @return the min value in the entire grid
   */
  public int findMin(){
      int minValue = grid[0][0];
      
      for(int col = 1; col < grid.length; col++){
          for(int row = 1; row < grid.length; row++){
      
          if(grid[row][col] <= minValue){
              minValue = grid[row][col];
            }
       } 
     }
      return minValue;
      
  }
  
  /**
   * @return the max value in the entire grid
   */
  public int findMax(){
      int maxValue = 0;
      
      for(int col = 1; col < grid.length; col++){
          for(int row = 1; row < grid.length; row++){
      
          if(grid[row][col] > maxValue){
              maxValue = grid[row][col];
            }
       }
      }
      return maxValue; 
  }
  
  /**
   * @param col the column of the grid to check
   * @return the index of the row with the lowest value in the given col for the grid
   */
  public  int indexOfMinRow(int col){
      int lowestRow = grid[0][col];
      
      for(int row = 1; row < grid.length; row++){
      
          if(grid[row][col] < lowestRow){
              lowestRow = row;
            }
        }
      return lowestRow; 
  }
  /**
   * DON'T CHANGE THIS CODE
   * Draws the grid using the given Graphics object. 
   * Colors should be grayscale values 0-255, scaled based on min/max values in grid
   * 
   * ALERT:Until your findMin and findMax methods work, your output will
   * be a completely black graph.
   */
  public void drawMap(Graphics g){
      
    int minVal = findMin();
    int maxVal = findMax();
    double range = maxVal - minVal;
    
    for(int row=0; row < grid.length; row++){
      for(int col=0; col<grid[0].length; col++){
         int val = (int)(((grid[row][col]-minVal)/range) * 255);
         //g.setColor(new Color(val,255-val,255-val));
         g.setColor(new Color(val,val,val));
         g.fillRect(col,row,1,1);
        }
    }      
  }
  

   /**
   * Find a path from West-to-East starting at given row.
   * Choose a foward step out of 3 possible forward locations, using greedy method described in assignment.
   * @return the total change in elevation traveled from West-to-East
   */
  public int drawLowestElevPath(Graphics g, int row){
    int currY = row; // row in grid of step one
    // draw initial step - column 0, current row (sent in as parameter)
    g.fillRect(0,row,1,1);
    g.setColor(Color.green);
    
    int currRow = 0;
    int totalDiff = 0;
    int difference = 0;
     for(int col=1; col<grid[0].length; col++){
  
        if(currY > 0){
        for(int i = currY-1; i <= currY +1; i++){
            if(grid[i][col] < grid[currY][col]){
                difference = Math.abs(grid[i][col] - grid[currY][col]);
                currY = i;
                totalDiff = totalDiff + difference;
            }
            if(grid[i][col] > grid[currY][col]){
                difference = Math.abs(grid[currY][col] - grid[currY][col]);
                currY = currY;
                totalDiff = totalDiff + difference;
            }
            if(grid[i][col] == grid[currY][col]){
                difference = Math.abs(grid[currY][col] - grid[currY][col]);
                currY= currY;
                totalDiff = totalDiff + difference;
            }
            
        }
     }
     if(currY == 0){
        for(int i = currY; i <= currY + 1; i++){
            if(grid[i][col] < grid[currY][col]){
                difference = Math.abs(grid[i][col] - grid[currY][col]);
                currY = i;
                totalDiff = totalDiff + difference;
            }
            if(grid[i][col] > grid[currY][col]){
                difference = Math.abs(grid[currY][col] - grid[currY][col]);
                currY = currY;
                totalDiff = totalDiff + difference;
            }
            if(grid[i][col] == grid[currY][col]){
                difference = Math.abs(grid[currY][col] - grid[currY][col]);
                currY= currY;
                totalDiff = totalDiff + difference;
            }
            
        }
     }
     
     currRow = currY;
    // draw next step where x is currently column and currY is row in grid
    int x = col; // the value of x will be generated by a loop that goes through the
    // columns, but for now, need something to put in "paint" statement
    g.fillRect(x,currY,1,1);
    g.setColor(Color.green);
    }
    
    return totalDiff; // computed change in elevation
    
  }
  
  /**
   * @return the index of the starting row for the lowest-elevation-change path in the entire grid.
   */
  public int indexOfLowestElevPath(Graphics g){
     
       int lowestElRow = 0;
       int start = grid[0][0];
       
       
       for(int row=0; row < 480; row++){
           int newLow = drawLowestElevPath(g,row);
           if(newLow < start){
               lowestElRow = row;
            }
        }
      return lowestElRow; // row of path with lowest elevation
  
  }
  
  
}